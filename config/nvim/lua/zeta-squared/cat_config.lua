local cat_config = {
    flavour = 'macchiato',
    transparent_background = true,
    show_end_of_buffer = true,
    dim_inactive = {
        enabled = false,
    },
    color_overrides = {
        macchiato = {
            rosewater = '#f7744f',
            flamingo = '#fe9797',
            pink = '#ea76cb',
            mauve = '#cc79f3',
            red = '#fa4f64',
            maroon = '#e64553',
            peach = '#f88134',
            yellow = '#fdb93a',
            green = '#94e93e',
            teal = '#179299',
            teal2 = '#dfed47',
            sky = '#04a5e5',
            sapphire = '#209fb6',
            blue = '#4bcdf8',
            lavender = '#7287fb',
            text = '#f2f4f5',
            subtext1 = '#b5bfe2',
            subtext0 = '#a5adce',
            overlay2 = '#a9afc8',
            overlay1 = '#838ba7',
            overlay0 = '#737994',
            surface2 = '#d2d9fc',
            surface1 = '#363a4e',
            surface0 = '#393e53',
            base = '#303446',
            mantle = '#292c3c',
            crust = '#232634',
        },
    },
    highlight_overrides = {
        all = function(c)
            return {
                Keyword = { fg = c.yellow },
                Repeat = { fg = c.yellow },
                Conditional = { fg = c.yellow },
                Delimiter = { fg = c.yellow },
                Type = { fg = c.mauve },
                Visual = { bg = c.teal },
                String = { fg = c.red },
                Constant = { fg = c.blue },
                Special = { fg = c.lavender },
                SpecialKey = { fg = c.mauve },
                Boolean = { fg = c.red },
                Operator = { fg = c.yellow },
                Exception = { fg = c.yellow },
                Include = { fg = c.blue },
                Function = { fg = c.green },
                Number = { fg = c.red },
                LineNr = { fg = c.surface2 },
                CursorLineNr = { fg = c.surface2 },
                EndOfBuffer = { fg = c.surface2 },
                NormalFloat = { fg = c.text, bg = c.base },
                FloatBorder = { fg = c.surface2, bg = c.base },
                Pmenu = { bg = c.surface1 },
                PmenuThumb = { bg = c.surface2 },
                PmenuSel = { fg = '#2b2d3a', bg = '#77d5f0' },
                DiagnosticUnderlineError = { undercurl = true },
                DiagnosticVirtualTextError = { fg = c.surface2 },
                DiagnosticVirtualTextWarn = { fg = c.surface2 },
                DiagnosticVirtualTextInfo = { fg = c.surface2 },
                DiagnosticVirtualTextHint = { fg = c.surface2 },
                DiagnosticFloatingWarn = { fg = c.yellow },
                DiagnosticFloatingInfo = { fg = c.mauve },
                DiagnosticFloatingHint = { fg = c.green },
                DiagnosticSignWarn = { fg = c.yellow },
                DiagnosticSignInfo = { fg = c.mauve },
                DiagnosticSignHint = { fg = c.green },
                LualineDiagnosticSignError = { fg = c.red, bg = c.surface0 },
                LualineDiagnosticSignWarn = { fg = c.yellow, bg = c.surface0 },
                LualineDiagnosticSignInfo = { fg = c.mauve, bg = c.surface0 },
                LualineDiagnosticSignHint = { fg = c.green, bg = c.surface0 },
                FzfLuaBorder = { fg = c.surface2 },
                FzfLuaTitle = { fg = c.surface2 },
                FzfLuaFzfInfo = { fg = c.surface2 },
                -- FzfLuaFzfMatch = { fg = c.lavender },
                -- FzfLuaFzfPrompt = { fg = c.lavender },
                -- FzfLuaFzfQuery = { fg = c.lavender },
                ['@module'] = { fg = c.rosewater },
                ['@keyword.function'] = { fg = c.yellow },
                ['@keyword.return'] = { fg = c.yellow },
                ['@keyword.export'] = { fg = c.yellow },
                ['@constant.builtin'] = { fg = c.red },
                ['@constructor'] = { fg = c.green },
                ['@constructor.typescript'] = { fg = c.green },
                ['@constructor.lua'] = { fg = c.text },
                ['@type.builtin'] = { fg = c.mauve },
                ['@function.builtin'] = { fg = c.green },
                ['@parameter'] = { fg = c.sky },
                ['@variable.member'] = { fg = c.peach },
                ['@variable.parameter'] = { fg = c.sky },
                ['@string.regexp'] = { fg = c.flamingo },
                ['@string.documentation'] = { fg = c.flamingo },
                ['@property'] = { fg = c.peach },
                ['@lsp.type.interface'] = { fg = c.mauve },
                ['@tag.delimiter'] = { fg = c.blue },
                ['@tag.jsx'] = { fg = c.peach },
                ['@tag.tsx'] = { fg = c.peach },
                ['@tag.builtin.jsx']  = { fg = c.mauve },
                ['@tag.builtin.tsx']  = { fg = c.mauve },
                ['@tag.attribute.jsx'] = { fg = c.teal2 },
                ['@tag.attribute.tsx'] = { fg = c.teal2 },
                ['@punctuation.bracket'] = { fg = c.text },
                ['@punctuation.special.javascript'] = { fg = c.yellow },
                ['@punctuation.special.typescript'] = { fg = c.yellow },
                ['@punctuation.special.jsx'] = { fg = c.yellow },
                ['@punctuation.special.tsx'] = { fg = c.yellow },
            }
        end,
    },
    integrations = {
        treesitter = true,
        blink_cmp = true,
        mini = {
            enabled = true,
            indentscope_color = "",
        },
        nvimtree = true,
    }
}

return cat_config
